// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFieldNames          = builder.RawFieldNames(&Product{})
	productRows                = strings.Join(productFieldNames, ",")
	productRowsExpectAutoSet   = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	productRowsWithPlaceHolder = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheSeckillProductIdPrefix = "cache:seckill:product:id:"
)

type (
	productModel interface {
		Insert(ctx context.Context, data *Product) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Product, error)
		Update(ctx context.Context, newData *Product) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductModel struct {
		sqlc.CachedConn
		table string
	}

	Product struct {
		Id          int64        `db:"id"`
		Name        string       `db:"name"`
		Description string       `db:"description"`
		Price       float64      `db:"price"`
		Stock       int64        `db:"stock"`
		Image       string       `db:"image"`
		CategoryId  int64        `db:"category_id"`
		SpuId       int64        `db:"spu_id"`
		Status      int64        `db:"status"`
		SalesVolume int64        `db:"sales_volume"`
		CreateTime  time.Time    `db:"create_time"`
		UpdateTime  sql.NullTime `db:"update_time"`
		DeleteTime  sql.NullTime `db:"delete_time"`
	}
)

func newProductModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProductModel {
	return &defaultProductModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`product`",
	}
}

func (m *defaultProductModel) Delete(ctx context.Context, id int64) error {
	seckillProductIdKey := fmt.Sprintf("%s%v", cacheSeckillProductIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, seckillProductIdKey)
	return err
}

func (m *defaultProductModel) FindOne(ctx context.Context, id int64) (*Product, error) {
	seckillProductIdKey := fmt.Sprintf("%s%v", cacheSeckillProductIdPrefix, id)
	var resp Product
	err := m.QueryRowCtx(ctx, &resp, seckillProductIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) Insert(ctx context.Context, data *Product) (sql.Result, error) {
	seckillProductIdKey := fmt.Sprintf("%s%v", cacheSeckillProductIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, productRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Description, data.Price, data.Stock, data.Image, data.CategoryId, data.SpuId, data.Status, data.SalesVolume, data.DeleteTime)
	}, seckillProductIdKey)
	return ret, err
}

func (m *defaultProductModel) Update(ctx context.Context, data *Product) error {
	seckillProductIdKey := fmt.Sprintf("%s%v", cacheSeckillProductIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Description, data.Price, data.Stock, data.Image, data.CategoryId, data.SpuId, data.Status, data.SalesVolume, data.DeleteTime, data.Id)
	}, seckillProductIdKey)
	return err
}

func (m *defaultProductModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheSeckillProductIdPrefix, primary)
}

func (m *defaultProductModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductModel) tableName() string {
	return m.table
}
